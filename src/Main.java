import java.util.Arrays;

public class Main {


    public static void main(String[] args) {
        task1();
        task2();
        task3();
        task4();
    }

    public static void task1() {
        System.out.println("Задания повышенной сложности 2 ");
        /*У нас есть массив, в котором содержатся целочисленные значения от 1 до 5.
Наш коллега что-то напутал, в итоге массив читается не с начала, а с конца.
Нам нужно исправить ошибку и переработать код так, чтобы массив читался в правильном порядке.
Нам дан массив чисел: {5, 4, 3, 2, 1}
Необходимо привести его к виду: {1, 2, 3, 4, 5}
Решите задачу с использованием дополнительного массива.
Напечатайте массив до преобразования и после с помощью*/
        int arr[] = {5, 4, 3, 2, 1};
        int arr1[] = new int[5];
        for (int i = 0; i < arr.length; i++) {
            arr1[i] = arr[arr.length - 1 - i];
        }
        System.out.print(Arrays.toString(arr));
        System.out.println();
        System.out.print(Arrays.toString(arr1));
    }

    public static void task2() {
        System.out.println("Задача 3");
        /*### Повышенная сложность. Задание 7
Решите предыдущее задание, но без использования дополнительного массива.
Необходимо добиться того, чтобы исходный массив полностью соответствовал второму массиву из прошлого задания.
Выведите результат программы в консоль тем же способом.
**Уточнения**:
- Это задание не на сортировку.
- Не использовать Arrays.sort() и другие способы сортировок.
- Числа в порядке убывания даны исключительно для указания направления чтения.
- Массив может быть 5 8 2 3 9, нужно из него сделать 9 3 2 8 5.
- Критерии оценки*/
        int arr[] = {5, 8, 2, 3, 9, 999, 777, 888, 9996, 65487};
        System.out.println("был массив " + Arrays.toString(arr));
        int k = arr.length / 2;

        for (int l = 0; l < k; l++) {
            int m = arr[arr.length - 1 - l];// 9 подставляемое число
            int o = arr[l];// 5  число вместо которого вставляем
            arr[l] = m;
            arr[arr.length - 1 - l] = o;
        }
        System.out.println("стал массив" + Arrays.toString(arr));
    }

    public static void task3() {
        System.out.println("Задача 4.");
        /*### Очень сложно. Задание 8
Задача, которая используется/бывает/встречается на собеседованиях.
Дан массив чисел  {−6, 2, 5, −8, 8, 10, 4, −7, 12, 1}
Необходимо найти два числа, сумма которых равна −2.
Напечатать эти числа в консоль.
- **Подсказка**
     Может потребоваться отсортировать массив с помощью Arrays.sort(arr).
- Критерии оценки
Найдены два числа, удовлетворяющие условию задачи.
– При изменении значений массива в консоль выводится корректный результат.
– В консоль выведен результат решения задания.*/
        int arr[] = {-6, 2, 5, -8, 8, 10, 4, -7, -12, 1};
        System.out.println(Arrays.toString(arr));
        int halfArray = arr.length / 2;
        int k, number2;
        for (int i = 0; i < arr.length - 1; i++) {
            int number1 = arr[i];

            for (k = 0; k < arr.length - 1; k++) { // чтобы в ответах не было повторов второе слагаемое смотрим только
                // в половине цикла, тк первый цикл пройдет по всем значениям
                number2 = arr[k];
                if (number2 == number1) {
                    break;
                }
                if (number2 + number1 == -2) {
                    System.out.println("сумма чисел " + number2 + " и " + number1 + " дает в сумме -2");
                }

            }
        }
    }
    public static void task4 () {
        System.out.println("Задача 5 ");/*### Повышенная сложность. Задание 5
Создайте матрицу 3х3 (двумерный массив типа int). Заполните единицами обе диагонали матрицы и напечатайте ее в консоль.
 Постарайтесь заполнить обе диагонали в одном цикле.
- Для печати следует использовать следующий код:
      ```java
    for (int[] row : matrix) {
    	for (int column : row) {
    		System.out.print(column + " ");
    	}
    	System.out.println();
}

    ```
- Критерии оценки*/

            }
            int matrik [][] = new int[3][3];


    }





